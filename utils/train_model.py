# XGboost regression model for vulnerability prediction
# Author: Manas Vardhan
# For training and saving of model


from sklearn.metrics import r2_score
import numpy as np
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
import xgboost
import pandas as pd

df = pd.read_csv(r'./data/health_df.csv')

# Create XGboost regression model for vulnerability prediction


X = df.drop(['vulnerability'], axis=1)
y = df['vulnerability']
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=123)


model = XGBRegressor(n_estimators=1000, max_depth=7,
                     eta=0.1, subsample=0.7, colsample_bytree=0.8)

model.fit(X_train, y_train)

predictions = model.predict(X_test)


print('R^2 Training: \n', r2_score(y_train, model.predict(X_train)))

print('R^2 Test: \n', r2_score(y_test, model.predict(X_test)))


# print the root mean squared error on the testing data
print('RMSE: \n', np.sqrt(mean_squared_error(y_test, model.predict(X_test))))


# save model to file
model.save_model(r"./data/xgboost.model")

# # load model from file
# loaded_model = XGBRegressor()
# loaded_model.load_model("xgboost.model")


print('Model Successfully Trained and Saved')
